Transform: AWS::Serverless-2016-10-31
Resources:
  dentistimoEventBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: dentistimoEventBus
  dentistimo:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub
        - ${ResourceName} From Stack ${AWS::StackName}
        - ResourceName: dentistimo
      StageName: Prod
      DefinitionBody:
        openapi: '3.0'
        info: {}
        paths:
          /clinics/:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${getClinic.Arn}/invocations
              responses: {}
          /clinics/{clinicId}:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${getClinics.Arn}/invocations
              responses: {}
          /clinics/{clinicId}/appointments:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${getAppointments.Arn}/invocations
              responses: {}
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${bookAppointment.Arn}/invocations
              responses: {}
          /clinics/{clinicId}/appointments/{appointmentId}:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${getAppointment.Arn}/invocations
              responses: {}
            delete:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${cancelAppointment.Arn}/invocations
              responses: {}
      EndpointConfiguration: REGIONAL
      TracingEnabled: true
      Cors:
        AllowMethods: "'POST'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"
        MaxAge: "'600'"

  getClinic:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: getClinic
      CodeUri: s3://dentistimo/GetClinic.zip
      Handler: index.handler
      Runtime: nodejs12.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Events:
        dentistimoGETclinics:
          Type: Api
          Properties:
            Path: /clinics
            Method: GET
            RestApiId: !Ref dentistimo
      Environment:
        Variables:
          TABLE_NAME: !Ref table
          TABLE_ARN: !GetAtt table.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref table
  getClinicLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${getClinic}
  getClinics:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: getClinics
      CodeUri: s3://dentistimo/GetClinics.zip
      Handler: index.handler
      Runtime: nodejs12.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Events:
        dentistimoGETclinicsid:
          Type: Api
          Properties:
            Path: /clinics/{clinicId}
            Method: GET
            RestApiId: !Ref dentistimo
      Environment:
        Variables:
          TABLE_NAME: !Ref table
          TABLE_ARN: !GetAtt table.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref table
  getClinicsLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${getClinics}
  getAppointments:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: getAppointments
      CodeUri: s3://dentistimo/GetAppointments.zip
      Handler: index.handler
      Runtime: nodejs12.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Events:
        dentistimoGETclinicsidappointments:
          Type: Api
          Properties:
            Path: /clinics/{clinicId}/appointments
            Method: GET
            RestApiId: !Ref dentistimo
      Environment:
        Variables:
          TABLE_NAME: !Ref table
          TABLE_ARN: !GetAtt table.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref table
  getAppointmentsLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${getAppointments}
  getAppointment:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: getAppointment
      CodeUri: s3://dentistimo/ReadFromDDB.zip
      Handler: index.handler
      Runtime: nodejs12.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Events:
        dentistimoGETclinicsidappointmentsid:
          Type: Api
          Properties:
            Path: /clinics/{clinicId}/appointments/{appointmentId}
            Method: GET
            RestApiId: !Ref dentistimo
      Environment:
        Variables:
          TABLE_NAME: !Ref table
          TABLE_ARN: !GetAtt table.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref table
  getAppointmentLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${getAppointment}
  bookAppointment:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: bookAppointment
      CodeUri: s3://dentistimo/WriteToEB.zip
      Handler: index.handler
      Runtime: nodejs12.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Events:
        dentistimoPOSTclinicsidappointments:
          Type: Api
          Properties:
            Path: /clinics/{clinicId}/appointments
            Method: POST
            RestApiId: !Ref dentistimo
      Environment:
        Variables:
          EVENTBUS: !Ref dentistimoEventBus
      Policies:
        - EventBridgePutEventsPolicy:
            EventBusName: dentistimoEventBus
  bookAppointmentLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${bookAppointment}
  cancelAppointment:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: cancelAppointment
      CodeUri: s3://dentistimo/DeleteFromEB.zip
      Handler: index.handler
      Runtime: nodejs12.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Events:
        dentistimoDELETEclinicsidappointmentsid:
          Type: Api
          Properties:
            Path: /clinics/{clinicId}/appointments/{appointmentId}
            Method: DELETE
            RestApiId: !Ref dentistimo
      Environment:
        Variables:
          EVENTBUS: !Ref dentistimoEventBus
      Policies:
        - EventBridgePutEventsPolicy:
            EventBusName: dentistimoEventBus
  cancelAppointmentLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${cancelAppointment}
  cancelAppointmentDDB:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: cancelAppointmentDDB
      CodeUri: s3://dentistimo/DeleteFromDDB.zip
      Handler: index.handler
      Runtime: nodejs12.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Environment:
        Variables:
          TABLE_NAME: !Ref table
          TABLE_ARN: !GetAtt table.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref table
  cancelAppointmentDDBLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${cancelAppointmentDDB}
  bookAppointmentDDB:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: bookAppointmentDDB
      CodeUri: s3://dentistimo/WriteToDDB.zip
      Handler: index.handler
      Runtime: nodejs12.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Environment:
        Variables:
          TABLE_NAME: !Ref table
          TABLE_ARN: !GetAtt table.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref table
  bookAppointmentDDBLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${bookAppointmentDDB}
  eventBook:
    Type: AWS::Events::Rule
    Properties:
      EventPattern:
        source:
          - aws.health
      EventBusName: dentistimoEventBus
      Targets:
        - Id: !Ref bookAppointmentDDB
          Arn: !GetAtt bookAppointmentDDB.Arn
  eventBookTobookAppointmentDDBPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt bookAppointmentDDB.Arn
      Principal: !Sub events.${AWS::URLSuffix}
      SourceArn: !GetAtt eventBook.Arn
  eventCancel:
    Type: AWS::Events::Rule
    Properties:
      EventPattern:
        source:
          - aws.health
      EventBusName: dentistimoEventBus
      Targets:
        - Id: !Ref cancelAppointmentDDB
          Arn: !GetAtt cancelAppointmentDDB.Arn
  eventCancelTocancelAppointmentDDBPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt cancelAppointmentDDB.Arn
      Principal: !Sub events.${AWS::URLSuffix}
      SourceArn: !GetAtt eventCancel.Arn
  table:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
Metadata:
  AWS::Composer::Groups:
    Group:
      Label: Group
      Members:
        - getAppointment
        - getAppointments
        - getClinics
        - getClinic
    Group2:
      Label: Group2
      Members:
        - Group4
        - Group3
        - Group5
    Group3:
      Label: Group3
      Members:
        - cancelAppointmentDDB
        - bookAppointmentDDB
    Group4:
      Label: Group4
      Members:
        - eventBook
        - dentistimoEventBus
        - eventCancel
    Group5:
      Label: Group5
      Members:
        - bookAppointment
        - cancelAppointment